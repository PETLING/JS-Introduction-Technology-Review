<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title></title>
        <style></style>
        <script>
            //js的注释
            //1.单行注释   Ctrl+/
            /* 2.多行注释  Shift + Alt + a
              2.多行注释  vscode中是 Shift + alt + /
            */
             <!-- 2.内嵌式的js -->
            // alert('注意：内嵌式，首页触发')
        </script>
        <!-- 3.外部引入的js -->
        
        <script src="./my.js"></script>
    </head>
    <body>
        <!--1. 行内式的js直接写入元素的内部 -->
        <input type="button" value="按我触发" onclick="alert('注意：内部元素，没错，你触发了')"/>
    </body>
</html>

~~~~~~~~~~~~~~~~~~~~~~~~~~~

//js解释性语言【JavaScript引擎】，一边解释一边运行，Java，c等是编译型语言【相对应的编译器】，先编译成一个文件在去执行
//同一变量下后面的值会覆盖前一值，层叠式更新变量
//可声明多个变量利用逗号隔开，且变量类型无需说明，区分大小写【字母，数字，下划线，美元符号$】
//变量只定义不声明，即为undefind。变量只不定义不声明，报错。变量只不定义声明，可行但不建议使用。
//变量类型通过右边的值去赋予，数据类型可变化（重新赋予时）
//规范：标识符命名【有意义】  变量一般用名词  函数一般动词  操作符  左右各保留一个空格  




//prompt这是一个输入框,同时进行赋值，获取的是字符型
var n=prompt('请输入你的年龄');
var str ='你的实际年龄'+ n +'岁'
//alert弹出提示框
alert('这是外部引用，并且你的年龄已经录入'+n);
//console控制台打印
console.log(str);
console.log('这是程序员能看的');
//声明一个变量
var age,sex,age2;
//赋值，将这个值存入变量中
age=18;
//变量的初始化
age2=18;
console.log(age)
console.log(age2)


//科学技术法的最大值最小值无穷大无穷小非数字
console.log(Number.MAX_VALUE)
console.log(Number.MIN_VALUE)
console.log(Infinity)
console.log(-Infinity)
console.log(NaN)
//isNaN()用于判断是否为数字,返回值是布尔值
//字符串型满足  外双内单  或是  内单外双  引号中转移字符串 \n
//字符串计算长度和拼接  .length  +字符串和其他拼接会变为字符型

//布尔型用于运算时    true当1计算false当0计算
//空值+数值型则为数值型  undefined+数值型则为NaN(not a number)
//typeof用于检测类型

//转换字符串  【变量.toString()】  【String(变量)】  加号拼接字符串【变量+''】隐式转换
//转换为数字型  【parseInt(变量)得到的是取整的值，回去掉后面的单位】  【parseFloat(变量)得到的是小数的值，回去掉后面的单位】  【Number(变量)强制转换函数】  利用了算数运算- * /【变量-0】【变量*1】隐式转换
//转换为布尔型  【Boolean(变量)除了0 NaN null '' undefined为false外  其余是true】


//小案例
// var user=prompt('您的名字是:'),
// userage=prompt('您的年龄是:')-0,
// usersex=prompt('您的性别是:');
// console.log(typeof userage)
// alert('次网页显示:\n您的名字是:'+user+'\n您的年龄是:'+userage+'\n您的性别是:'+usersex)

//浮点数运算会出错，并且不进行浮点数相等
//表达式是由数字、运算符、变量等组成的式子 存在返回值
//自增 ++a 先自增赋值  a++ 先赋值不变后自增【自增自减均为表达式】
//比较运算符，返回的结果为布尔值   ==存在默认转换类型会把字符串数据转换为数字型   ===全等不存在转换
//逻辑运算符  && 与(否)  ||或(真)  非！
//逻辑与中断  A&&B AB均为表达式 A为真则返回B表达式    表达式A为假时返回0
//逻辑或中断  A||B AB均为表达式 A为真则返回A表达式     表达式A为假时返回B
//赋值运算符+=等等
//操作数的个数决定几元运算符 
//() ++ -- ! */% +- >< == 先&&后|| = .由低运算进行划分


//流程控制  顺序、分支if else,switch case break[判断是全等形式]、循环流程for,while,do while控制
//for循环  初始变量；条件变量；操作表达式 循环体  先一二到四后三在循环二四，第一句只执行一次  双for循环  外行内数  外一次内全部
//控制台sources断点模式
//基本用法简单不介绍
//分支小案例
// var user=prompt('请输入用户的姓名:');
// if (user=='刘德华') {
//     alert('中了5元')
// } else{
//     alert('很可惜，没有中奖!')
// }
//只会运行匹配的case部分前提break存在
// var fruit=prompt('请输入需要查询水果的名称:');
// switch (fruit){
//     case '苹果':
//     alert('苹果10元/斤')
//         break;
//     case '香蕉':
//     alert('香蕉10元/斤')
//          break;
//      case '梨子':
//     alert('梨子10元/斤')
//         break;
//     default:
//     alert('其余水果均5元/斤')
//         break;
// }

//ATM存款机
// var sum=100;
// do{
// var num = prompt('网页显示:\n1.存钱\n.取钱\n3.显示余额\n4.退出');
// if (num==1) {
//     var add = prompt('输入存钱金额:');
//     sum+=add;
    
// } else if(num==2){
//     var take = prompt('输入取出的金额:');
//     sum-=take;
// } else if(num==3){
//     alert('当前余额为:'+sum);
// }
// }while(num!=4);


//数组（Array）一组数据的集合  new创建方式  利用数组字面量[],利用逗号隔开【数组元素，索引】正式说法：访问
//arr[0] 没元素则返回值为undefined  数组的长度  数组名.length
//若定义长度未定义元素则为undefined 追加/替换数组元素 arr[4]=''或是arr.length=6
var shuzu1 = new Array();
var shuzu2 = [];
//小案例
//1.数组去重
// var arr =[2,0,4,5,6,7,8,10,29,0,20,30];
// var newArr=[];
// for (var i = 0; i < arr.length; i++) {
//     if(arr[i]!=0){
            //元素会自动识别变换无需自增
//         newArr[newArr.length]=arr[i];
//     }
// }
// console.log(newArr)
//2.翻转数组
// var arr =['red','pink','blue','purple'];
// var newArr=[];
// for (var i = arr.length - 1; i >= 0; i--) {
//         newArr[newArr.length]=arr[i];
// }
// console.log(newArr)
//3.冒泡排序sort
// var arr =[2,0,0,4,5,6,7,8,10,29,20,30];
// var temp;
// for (var i = 0; i < arr.length; i++) {
//     for(var j = i+1; j < arr.length; j++){
//         if(arr[i]<=arr[j]){
//             temp=arr[i];
//             arr[i]=arr[j];
//             arr[j]=temp;
//         }
//     }
// }
// console.log(arr)


//函数:封装了一段重复使用的代码块 形成一个简单的函数接口
//函数之间可以相互调用
//声明函数 形参 调用函数 实参  function声明函数的关键字，函数名一般是动词，只有调用才执行
//实参个数多于形参，会取值   实参小于形参，一个变量未给值即是undefined,变为NaN
//retrun 需要返回的结果； 返回给调用函数的调用者，相当于赋值getSum()=返回的结果;  简化方式利用赋值
//return后面的代码不执行且只返回一个值多个值时只返回最后一个    返回多个运算结果可用数组[ sum1 + sum2] 在用遍历取出
//函数没有return时返回undefined
// function getSum(num1,num2){
//     var sum = 0,
//     for (var i = num1; i < num2; i++) {
//         sum+=i;
//         }
//     console.log(sum)
// }
// getSum(22,44);

//arguments  内置对象获取参数，存储传递的所有实参   只有函数才有这个 取值时可以用遍历实现
//arguments 展现的是伪数组具有.length属性按索引方式存储 没有正真数组的方法pop()push()等等
// function fn(){
//     console.log(arguments);
// console.log(arguments.length);
// console.log(arguments[i]);
// }
// fn(未知);
//小案例
// function getMax(){
//     var max = arguments[0],
//     for (var i = 0; i < arguments.length; i++) {
//         if(arguments[i]>max){
//             max=arguments[i];
//         }
//     }
//     return max;
// }
// console.log(getMax(22,44));

//利用关键字自定义函数(命名式) functionfn(){}
//函数表达式(匿名函数)var 变量名 = function(){}
//js作用域:就是代码名字(变量)在某个范围内起作用和效果
//全局和局部作用域    函数中局部作用域/函数作用域   script中的全局作用域  同时存在不冲突

//变量的作用域  
//全局变量【函数内部未声明的变量也是全局变量】  只有浏览器关闭才会销毁，占内存
//局部变量【函数的形参也是局部变量】  程序结束就销毁，节约
//es6  js才存在块级作用域  {}

//作用于链   内部函数和外部函数  内部函数访问外部函数的变量，采取的是链式查找方式【就近原则】
//js引擎 预解析 执行代码  会将var 还有函数提升到当前作用域的最前面后按照代码由上往下执行
//预解析分为 变量预解析（变量提升）和函数预解析（函数提升）函数代码整体提升
//实例
console.log(num);
var a = b = c = 9;//相当于var a = 9;b = 9;c = 9;
//集体声明var a = 9,b = 9,c = 9;
var num=10;    //var num;提升打印后num=10；所以结果为undefined

// fun();
// var fun =function(){
//     console.log(22);//变量fun同上
// }

fu();
function fu(){
    console.log(22);//函数整体提升
}



//js对象:是一个具体的事物，是一组无序的相关属性和方法的集合
//属性常用n词，方法常用动词  用匿名函数
//字面量创建对象{}  里面采取的属性或方法采用键值对的形式  键 属性名  值 属性值
var obj = {
    uname:'张三丰',
    age:18,
    sex:'男',
    sayHi:function(){
        console.log('HI~');
    }
};
var obje = new Object();
obje.uname = '张三枫';//追加
//调用方法和属性 对象名.属性名或对象名['属性名'] 对象名.方法名()
console.log(obj.age);
console.log(obj['sex']);
obj.sayHi();

//构造函数  用于封装对象，把相同的属性和方法抽象出来封装到函数里  泛指的某一大类相当于Java的类
//无需return就可以返回结果
//调用函数必须用new 函数名()  this.属性名和方法 指向  对象实例化/创建对象的过程
// function 构造函数名(形参){
//     this.属性 = 值/形参;
//     this.方法 = function(){}
// }
// new 构造函数名(实参);
//new关键字的执行过程：
//1. new构造函数可以在内存中创建一个空的对象
//2. this就会指向刚才创建的空对象
//3. 执行构造函数里的代码,给这个新对象添加属性和方法
//4. 返回这个新对象(无需return)
//小案例
function wangzhe(name,type,blood,attack) {
    this.name = name;
    this.type = type;
    this.blood = blood;
    this.attack = attack;
}

var ss = new wangzhe('廉颇','力量型','500血量','近战');
console.log(ss)

//for(变量 in 对象)  遍历对象  输出/变量k返回属性名  输出/对象[k]返回属性值



//内置对象，自定义对象【前两个属性属于ECMAScript】，浏览器对象【js独有的 js api】
//内置对象 js提前内置好的方法 例如：Array Date等
//查文档  MDN/W3C
//1.Math对象  是一个内置对象，它拥有一些数学常数属性和数学函数方法。Math 不是一个函数对象。Math 不是一个构造器。Math 的所有属性与方法都是静态的。引用圆周率的写法是 Math.PI，调用正余弦函数的写法是 Math.sin(x)，x 是要传入的参数。Math 的常量是使用 JavaScript 中的全精度浮点数来定义的。   Math.abs()绝对值【存在隐式转换】  Math.floor()向下取整  Math.ceil()向上取整  Math.round()四舍五入取整.5往大的取【无论正负】 Math.random() 生成一个随机数【无参数，范围[0,1)】
//案例
// function getRandom(min,max){
//     return Math.floor(Math.random() * (max - min + 1) + min);
// }
// console.log(getRandom(1,10))
//2.Date() 日期对象 创建一个新Date对象的唯一方法是通过new 操作符，例如：let now = new Date(); 若将它作为常规函数调用（即不加 new 操作符），将返回一个字符串，而非 Date 对象。 字符串型（'YYYY-MM-DDTHH mm:ss:ss'）数字型【比实际的月份大一】（YYYY,MM,DDTHH）日期格式化方法 会影响输出形式 getMonth()返回月份小一个月（0到11）首先需要new Date()格式化  距离1970年总毫秒valueof() getTime() 简单些写法+new Date()  无兼容时使用H5新增的总毫秒数Date.now()  时间戳只出现一次的数，总毫秒-当前毫秒
// d=parseInt(总秒数/60/60/24)//天数
// h=parseInt(总秒数/60/60%24)//小时
// m=parseInt(总秒数/60%60)//分数
// s=parseInt(总秒数%60)//当前秒数
//计时器小案例
function countDown(time){
    var nowTime = +new Date();
    var inputTime = + new Date(time);
    var times =(inputTime - nowTime) / 1000;
    var d=parseInt(times / 60 / 60 / 24);//天数
    d = d< 10 ? '0' + d : d;
    var h=parseInt(time / 60 / 60 % 24);//小时
    h = h< 10 ? '0' + h : h;
    var m=parseInt(times / 60 % 60);//分数
    m = m< 10 ? '0' + m : m;
    var s=parseInt(times % 60);//当前秒数
    s = s < 10 ? '0' + s : s;
    return d+ '天' + h + '时' + m + '分' + s + '秒'
}
console.log((countDown('2019-5-1 18:00:00')))
var date = new Date();
console.log(date)
//3.数组对象  new Array(3)/数组长度，两个以上的参数则会成为数组元素
//(1)instanceOf(参数) (2)H5新增效果Array.isArray(参数) 用于检测是否为数组
//(1)indexOof(参数) 从前往后数组索引 (2)lastIndexOof(参数) 从后往前数组索引
//(1)toString(参数) (2)join(‘分隔符’) 转换字符串
//末尾追加数组元素  数组名.push(参数) 返回的结果是数组的长度
//开头追加数组元素  数组名.unshift(参数) 返回的结果是数组的长度
//删除数组最后一个元素  数组名.pop() 无参数且返回的结果是数组的删除的元素
//删除数组第一个元素  数组名.shift() 无参数且返回的结果是数组的删除的元素
//数组翻转 数组排序  数组名.reserve() 数组名.sort()
var arrr = [1,23,4,355,65,654];
arrr.sort(function(a,b){
    return a-b; //升序
    return b-a; //降序
})
//去重小案例
function unique(arr){
    var newArr = [];
    for (var i = 0; i < arr.length; i++) {
        //已有元素则去掉
       if(newArr.indexOf(arr[i]) === -1){
           newArr.push(arr[i]);
       }
    }
    return newArr;
}
var demo = unique(['c','a','b','c','d','a','b',]);
console.log(demo);

//字符串对象     未查找到就是-1
//字符串的不可变形 单独会开辟一个空间将新值放入，原先不变加载在新得空间中，占内存会卡死
//基本包装类型：简单数据类型包装成为了复杂数据类型
//根据字符串返回位置  indexOf('参数',索引号) 从索引号开始查找【index+1】可持续查找
//相应位置返回字符 1.chartAt(index) 2.H5新增的str[index] 返回ASCII码 1.chartCodeAt(index)判断用户按的键位
var str = 'andy';
//简单类型为什么会有length
console.log(str.length)
var temp = new String('andy';)
//把临时变量的值传给str
str = temp;
//在进行销毁临时变量
temp = null;
//字符串的拼接 concat('字符串1','字符串2') substr(起始位置star,截取几个length)相当于数组的sclice()
//替换字符串 replice('被替换的字符','替换的字符') 只会替换第一次出现的字符
//字符转换为数组 split('分隔符')   相反的功能join('分隔符')




//简单数据类型【基本数据类型或是值类型】和复杂数据类型【引用类型】
//特殊null是空对象 有对象不知有啥可存为null
//放入的位置：栈和堆


//简单数据类型存入栈中开辟一个地址存入的是值    复杂数据类型存入堆首先在栈中找地址，地址指向堆中的数据
